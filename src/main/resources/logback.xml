<?xml version="1.0" encoding="UTF-8"?>

<!-- 这里定义logback的参数，
	scan:当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true。
	scanPeriod:设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。
	debug:当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。 -->
<configuration scan="true" scanPeriod="60 seconds" debug="false">
	<!-- 定义参数常量 -->
	
	<!-- TRACE<DEBUG<INFO<WARN<ERROR 表示被记录下来的log的等级 -->
	<!-- logger.trace("mse") logger.debug("msg") ... -->
	 <property name="log.level" value="debug"/>
	 
	 <property name="log.maxHistory" value="30"/>
	 <!-- catalina.base存储的是tomcat实例的根目录 -->
	 <property name="log.filePath" value="${catalina.base}/logs/webapps"/>
	 <!-- 显示出来的log的格式 -->
	 <!-- d表示显示log时间的格式，输出是哪个线程执行的，从左显示5个字符宽度用于显示该log的级别(INFO,WARN...)，记录是哪个package下边的哪个类输出的相关信息，%msg表示显示日志信息，%n表示换行符 -->
	 <property name="log.pattern" value="%d{yyyy-MM-dd HH:mm:ss:SSS} [%thread] %-5level %logger{50} - %msg%n"/>
	 
	 <!-- 控制台设置 -->
	 <appender name="consoleAppender" class="ch.qos.logback.core.ConsoleAppender">
	 	<!-- 定义输出日志的格式 -->
	 	<encoder>
	 		<!-- 这里是logback将一个event转换成byte字符串数组，pattern制定的是转换的格式，log.pattern在上边定义 -->
	 		<pattern>${log.pattern}</pattern>
	 	</encoder>
	 </appender>
	 
	 <!-- DEBUG -->
	 <!-- RollingFileAppender会通过滚动的方式生成新的日志文件 -->
	 <appender name="debugAppender" class="ch.qos.logback.core.rolling.RollingFileAppender">
	 	<!-- log文件路径 -->
	 	<file>${log.filePath}/debug.log</file>
	 	<!-- 滚动策略，这里从名字可以看出是以时间为基础进行滚动 -->
	 	<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
	 		<!-- 文件名称，只有日期到了第二天或以后的时间，前几天的log文件才会被压缩打包为.gz文件 -->
	 		<fileNamePattern>${log.filePath}/debug/debug.%d{yyyy-MM-dd}.log.gz</fileNamePattern>
	 		<!-- 我们希望最多保存30天的日志文件，若已存满30天，那么最早一天的日志会被删除，一直循环进行 -->
	 		<maxHistory>${log.maxHistory}</maxHistory>
	 	</rollingPolicy>
	 	<encoder>
	 		<!-- 这里是logback将一个event转换成byte字符串数组，pattern制定的是转换的格式，log.pattern在上边定义 -->
	 		<pattern>${log.pattern}</pattern>
	 	</encoder>
	 	<filter class="ch.qos.logback.classic.filter.LevelFilter">
	 		<!-- 我们只接受DEBUG级别的日志信息，WARN和ERROR同样是不接受的 -->
	 		<level>DEBUG</level>
	 		<onMatch>ACCEPT</onMatch>
	 		<onMismatch>DENY</onMismatch>
	 	</filter>
	 </appender>
	 
	 <!-- INFO -->
	 <appender name="infoAppender" class="ch.qos.logback.core.rolling.RollingFileAppender">
	 	<!-- 文件路径 -->
	 	<file>${log.filePath}/info.log</file>
	 	<!-- 滚动策略，这里从名字可以看出是以时间为基础进行滚动 -->
	 	<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
	 		<!-- 文件名称 -->
	 		<fileNamePattern>${log.filePath}/info/info.%d{yyyy-MM-dd}.log.gz</fileNamePattern>
	 		<!-- 我们希望最多保存30天的日志文件 -->
	 		<maxHistory>${log.maxHistory}</maxHistory>
	 	</rollingPolicy>
	 	<encoder>
	 		<!-- 这里是logback将一个event转换成byte字符串数组，pattern制定的是转换的格式，log.pattern在上边定义 -->
	 		<pattern>${log.pattern}</pattern>
	 	</encoder>
	 	<filter class="ch.qos.logback.classic.filter.LevelFilter">
	 		<!-- 我们只接受DEBUG级别的日志信息，WARN和ERROR同样是不接受的 -->
	 		<level>INFO</level>
	 		<onMatch>ACCEPT</onMatch>
	 		<onMismatch>DENY</onMismatch>
	 	</filter>
	 </appender>
	 
	 <!-- ERROR -->
	 <appender name="errorAppender" class="ch.qos.logback.core.rolling.RollingFileAppender">
	 	<!-- 文件路径 -->
	 	<file>${log.filePath}/error.log</file>
	 	<!-- 滚动策略，这里从名字可以看出是以时间为基础进行滚动 -->
	 	<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
	 		<!-- 文件名称 -->
	 		<fileNamePattern>${log.filePath}/error/error.%d{yyyy-MM-dd}.log.gz</fileNamePattern>
	 		<!-- 我们希望最多保存30天的日志文件 -->
	 		<maxHistory>${log.maxHistory}</maxHistory>
	 	</rollingPolicy>
	 	<encoder>
	 		<!-- 这里是logback将一个event转换成byte字符串数组，pattern制定的是转换的格式，log.pattern在上边定义 -->
	 		<pattern>${log.pattern}</pattern>
	 	</encoder>
	 	<filter class="ch.qos.logback.classic.filter.LevelFilter">
	 		<!-- 我们只接受DEBUG级别的日志信息，WARN和ERROR同样是不接受的 -->
	 		<level>ERROR</level>
	 		<onMatch>ACCEPT</onMatch>
	 		<onMismatch>DENY</onMismatch>
	 	</filter>
	 </appender>
	 
	 <!-- 指明logger只记录com.chq.o2o这个包下产生的日志信息，level定义了我们会将log.level及以上级别的信息记录下来(这里应该是仅打印到控制台上，想日志文件中记录有过滤器在控制 -->
	 <!-- 这个additivity未ture时，会将root下面的appender也放到这个logger下边来，同时记录的log级别是该logger中定义的级别，而不是root中定义的级别，在这里表现为
	 	虽然我们没讲consoleAppender放到这个logger中，但是因为additivity的存在，日志信息仍会打印到控制台上 -->
	 <!-- 每个类的log只能在一个logger中输出 -->
	 <logger name="com.chq.ssmshop" level="${log.level}" additivity="true">
	 	<appender-ref ref="debugAppender"/>
	 	<appender-ref ref="infoAppender"/>
	 	<appender-ref ref="errorAppender"/>
	 </logger>
	 
	 <!-- root是一个特殊的logger，是根logger，若上边的logger未指定level，那么它就会继承root的level -->
	 <root level="INFO">
	 	<appender-ref ref="consoleAppender"/>
	 </root>
	 
	 <!-- 最后说一下日志一般加在什么地方，一般加在service和controller的方法中，依据业务需要来加一些log -->
</configuration>